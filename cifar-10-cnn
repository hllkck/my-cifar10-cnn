{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9757777,"sourceType":"datasetVersion","datasetId":5974924}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport os\nimport pickle\nfrom tensorflow.keras.utils import to_categorical\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout,BatchNormalization, GlobalAveragePooling2D\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nimport matplotlib.pyplot as plt \nfrom tensorflow.keras.optimizers import SGD\nfrom sklearn.model_selection import train_test_split","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"scrolled":true,"execution":{"iopub.status.busy":"2024-12-04T18:41:33.980165Z","iopub.execute_input":"2024-12-04T18:41:33.980467Z","iopub.status.idle":"2024-12-04T18:41:46.658345Z","shell.execute_reply.started":"2024-12-04T18:41:33.980438Z","shell.execute_reply":"2024-12-04T18:41:46.657373Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"file_paths = []  \nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        file_path = os.path.join(dirname, filename)  \n        file_paths.append(file_path)  \n\nprint(file_paths)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T18:41:49.894372Z","iopub.execute_input":"2024-12-04T18:41:49.894709Z","iopub.status.idle":"2024-12-04T18:41:49.907133Z","shell.execute_reply.started":"2024-12-04T18:41:49.894681Z","shell.execute_reply":"2024-12-04T18:41:49.906485Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nfile_paths = [\n    '/kaggle/input/cifar-10/data_batch_1',\n    '/kaggle/input/cifar-10/data_batch_2',\n    '/kaggle/input/cifar-10/data_batch_3',\n    '/kaggle/input/cifar-10/data_batch_4',\n    '/kaggle/input/cifar-10/data_batch_5'\n]\n\ndata_list = []\n\nfor file_path in file_paths:\n    with open(file_path, 'rb') as f:\n        batch = pickle.load(f, encoding='bytes')\n        data = pd.DataFrame(batch[b'data'])  # datasets of images\n        data['label'] = batch[b'labels']     # labels\n        data_list.append(data)\n\nmerged_dataset = pd.concat(data_list, ignore_index=True)\n\nprint(\"Combined dataset:\")\n#print(merged_dataset.head())\nprint(merged_dataset.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T18:41:52.563611Z","iopub.execute_input":"2024-12-04T18:41:52.564271Z","iopub.status.idle":"2024-12-04T18:41:55.296206Z","shell.execute_reply.started":"2024-12-04T18:41:52.564240Z","shell.execute_reply":"2024-12-04T18:41:55.295503Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# pixel dataset\nX = merged_dataset.drop(columns=['label'])\n# class dataset\ny = merged_dataset['label']\n#print(X.head())\n#print(y.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T18:41:58.696742Z","iopub.execute_input":"2024-12-04T18:41:58.697069Z","iopub.status.idle":"2024-12-04T18:41:59.199505Z","shell.execute_reply.started":"2024-12-04T18:41:58.697041Z","shell.execute_reply":"2024-12-04T18:41:59.198596Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nX = X.values.reshape(-1, 32, 32, 3)\nX = X / 255.0\ny = to_categorical(y, 10)\nprint(X.shape)\nprint(y.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T18:42:02.131090Z","iopub.execute_input":"2024-12-04T18:42:02.131912Z","iopub.status.idle":"2024-12-04T18:42:02.525730Z","shell.execute_reply.started":"2024-12-04T18:42:02.131875Z","shell.execute_reply":"2024-12-04T18:42:02.524925Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = Sequential([\n    Conv2D(64, (3, 3), activation='relu', input_shape=(32, 32, 3), padding='same'),\n    MaxPooling2D((2, 2)),\n    Conv2D(128, (3, 3), activation='relu', padding='same'),\n    MaxPooling2D((2, 2)),\n    Conv2D(256, (3, 3), activation='relu', padding='same'),\n    MaxPooling2D((2, 2)),\n    Flatten(),\n    Dense(256, activation='relu'),\n    Dropout(0.5), \n    Dense(10, activation='softmax')  \n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nearly_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, min_lr=1e-6)\n\nhistory = model.fit(X_train, y_train, epochs=20, batch_size=128, validation_data=(X_test, y_test),\n                    callbacks=reduce_lr)\n\nplt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nplt.plot(history.history['loss'], label='Train Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Model Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['accuracy'], label='Train Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.title('Model Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T18:47:10.874068Z","iopub.execute_input":"2024-12-04T18:47:10.874428Z","iopub.status.idle":"2024-12-04T18:48:21.412433Z","shell.execute_reply.started":"2024-12-04T18:47:10.874397Z","shell.execute_reply":"2024-12-04T18:48:21.411406Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ntest_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=2)\n\nprint(f'Test kaybı: {test_loss}')\nprint(f'Test doğruluğu: {test_accuracy}')\n\npredictions = model.predict(X_test)\n\nfor i in range(5):\n    print(f'Tahmin: {predictions[i]} - Gerçek Etiket: {y_test[i]}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T18:48:27.533716Z","iopub.execute_input":"2024-12-04T18:48:27.534431Z","iopub.status.idle":"2024-12-04T18:48:30.480840Z","shell.execute_reply.started":"2024-12-04T18:48:27.534398Z","shell.execute_reply":"2024-12-04T18:48:30.479939Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_file_path = '/kaggle/input/cifar-10/test_batch'\n\nwith open(test_file_path, 'rb') as f:\n    test_batch = pickle.load(f, encoding='bytes')\n    X_test = pd.DataFrame(test_batch[b'data'])    \n    y_test = test_batch[b'labels']               \n\nX_test = X_test.values.reshape(-1, 32, 32, 3) / 255.0\ny_test = to_categorical(y_test, 10)               \n\ntest_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=2)\nprint(f\"Test Loss: {test_loss}\")\nprint(f\"Test Accuracy: {test_accuracy}\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T18:48:33.587202Z","iopub.execute_input":"2024-12-04T18:48:33.588300Z","iopub.status.idle":"2024-12-04T18:48:34.716971Z","shell.execute_reply.started":"2024-12-04T18:48:33.588261Z","shell.execute_reply":"2024-12-04T18:48:34.716114Z"}},"outputs":[],"execution_count":null}]}